<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>fungos&#x27; home</title>
      <link>https://fungos.github.io</link>
      <description>:shrug:</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://fungos.github.io/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Wed, 11 Dec 2019 00:00:00 +0000</lastBuildDate>
      <item>
          <title>A deep dive with Dolphin</title>
          <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://fungos.github.io/dolphin-deep-dive/</link>
          <guid>https://fungos.github.io/dolphin-deep-dive/</guid>
          <description xml:base="https://fungos.github.io/dolphin-deep-dive/">&lt;p&gt;or, how systemd broke my file manager.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tl-dr&quot;&gt;TL;DR&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;em&gt;Systemd&lt;&#x2F;em&gt; broke my file manager and I lost about 4 hours investigating it. But I suffered less than
if I was using Windows. Jump to the &lt;a href=&quot;https:&#x2F;&#x2F;fungos.github.io&#x2F;dolphin-deep-dive&#x2F;#conclusion&quot;&gt;conclusion&lt;&#x2F;a&gt; to see why.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-bit-about-my-linux-background&quot;&gt;A bit about my linux background&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;m a long time linux desktop user (since 1998) and other than a few times where I did adventure into
linux internals (for learning, programming or for fun), I can&#x27;t remember the last time I actually had to
do it to solve anything.&lt;&#x2F;p&gt;
&lt;p&gt;I did have moments where I had fun tuning my system for no sensible reason, including custom configured
kernels with minor personal patches here and there. I also did have my Gentoo years where everything was
statically built with custom compiler flags and tweaks for &quot;performance&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;As a system administrator, I did maintain some servers (as work and at home). But maybe in the last 10
years my adventures on linux land where basically as a desktop user and the very few times where I needed
to deal with services, my muscle memory for &lt;em&gt;init&lt;&#x2F;em&gt; always got me in trouble with &lt;em&gt;systemd&lt;&#x2F;em&gt;. I know almost
nothing about &lt;em&gt;systemd&lt;&#x2F;em&gt; and I have to &lt;a href=&quot;https:&#x2F;&#x2F;duckduckgo.com&#x2F;&quot;&gt;ddg&lt;&#x2F;a&gt; it every time.&lt;&#x2F;p&gt;
&lt;p&gt;Currently I use &lt;a href=&quot;https:&#x2F;&#x2F;manjaro.org&#x2F;&quot;&gt;Manjaro Linux&lt;&#x2F;a&gt;, a distro based on &lt;a href=&quot;https:&#x2F;&#x2F;www.archlinux.org&#x2F;&quot;&gt;Arch Linux&lt;&#x2F;a&gt;,
and I&#x27;ve always been a &lt;a href=&quot;https:&#x2F;&#x2F;kde.org&#x2F;&quot;&gt;KDE&lt;&#x2F;a&gt; user. And I know for a fact that &lt;em&gt;KDE&lt;&#x2F;em&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.qt.io&#x2F;download-open-source&quot;&gt;Qt&lt;&#x2F;a&gt;
are some incredible and unique pieces of technology.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately I&#x27;m in a weird position where I&#x27;m required to use Windows professionally as I&#x27;m a game
developer. ¯\_(ツ)_&#x2F;¯&lt;&#x2F;p&gt;
&lt;p&gt;In all my years as a home linux desktop user, I barely had any issues. Until recently.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-this-about&quot;&gt;What is this about&lt;&#x2F;h3&gt;
&lt;p&gt;I decided to write this post to myself and to document my steps investigating a problem that have been
occurring to me in the last few weeks, which I&#x27;ve been delaying to check. After reading the
&lt;a href=&quot;https:&#x2F;&#x2F;randomascii.wordpress.com&#x2F;2019&#x2F;12&#x2F;08&#x2F;on2-again-now-in-wmi&#x2F;&quot;&gt;O(n^2), again, now in WMI&lt;&#x2F;a&gt; post
by &lt;strong&gt;Bruce Dawson&lt;&#x2F;strong&gt; on how he investigated and found the reason of multi-minute delays on his workstation,
I thought &quot;why not try the same with my issue and see where this takes me? It could be interesting...&quot;.
Here is it, and I hope it is.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;As I work with windows and my work deal in part with performance optimizations and debugging,
Bruce Dawson&#x27;s blog is a must-read.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;the-problem&quot;&gt;The problem&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ve been hit for a long delay opening &lt;a href=&quot;https:&#x2F;&#x2F;kde.org&#x2F;applications&#x2F;system&#x2F;org.kde.dolphin&quot;&gt;Dolphin&lt;&#x2F;a&gt;
(the &lt;em&gt;KDE&lt;&#x2F;em&gt;&#x27;s file manager) which could take up to one minute to show up. As being something essential
as it is, this started to really annoy me and a bit of searching didn&#x27;t reveal anything obvious but
some similarly looking cases. I believe this started since my last distro update which was recent (2019-11).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;taking-the-dive&quot;&gt;Taking the dive&lt;&#x2F;h3&gt;
&lt;p&gt;Even with similar &lt;em&gt;Dolphin&lt;&#x2F;em&gt; issues reported over different distros forums, I was unable to have any actual
hints about my own issue. So I did go search directly into &lt;em&gt;KDE&lt;&#x2F;em&gt; bugzilla for some similarly looking bugs, but
only a few had the same symptoms and not much more information. What most had in common was that the
responder always asked for a backtrace, obviously.&lt;&#x2F;p&gt;
&lt;p&gt;But before trying that, I did the simpler stuff first.
Running &lt;code&gt;dolphin&lt;&#x2F;code&gt; directly from &lt;em&gt;Konsole&lt;&#x2F;em&gt; to see if some log output appears.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜  ~&lt;&#x2F;span&gt;&lt;span&gt; dolphin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;QObject::connect:&lt;&#x2F;span&gt;&lt;span&gt; No such signal QDBusAbstractInterface::DeviceAdded(QString)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;QObject::connect:&lt;&#x2F;span&gt;&lt;span&gt; No such signal QDBusAbstractInterface::DeviceRemoved(QString)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kf5.kio.core: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Could not enter folder tags:&#x2F;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;this only reveals two signal&#x2F;slot signature mismatch. This is the &lt;em&gt;Qt&lt;&#x2F;em&gt; way to tell
that a callback &lt;em&gt;Dolphin&lt;&#x2F;em&gt; is trying to setup has a bad function signature somewhere,
which can cause some functionality to not work correctly.&lt;&#x2F;p&gt;
&lt;p&gt;This also means that &lt;em&gt;Dolphin&lt;&#x2F;em&gt; try to listen when a device is added or removed using &lt;code&gt;QDBus&lt;&#x2F;code&gt;, which is &lt;em&gt;Qt&lt;&#x2F;em&gt;&#x27;s
interface to the &lt;a href=&quot;https:&#x2F;&#x2F;www.freedesktop.org&#x2F;wiki&#x2F;Software&#x2F;dbus&#x2F;&quot;&gt;dbus&lt;&#x2F;a&gt; system used for &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Inter-process_communication&quot;&gt;inter-process communication&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;My first reaction was to ask myself if it could be locked waiting a reply from some storage device?
Let&#x27;s see what &lt;code&gt;strace&lt;&#x2F;code&gt; has to say about it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜  ~&lt;&#x2F;span&gt;&lt;span&gt; strace dolphin
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;lots &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt; output&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;statx&lt;&#x2F;span&gt;&lt;span&gt;(AT_FDCWD, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;etc&#x2F;fstab&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, AT_STATX_SYNC_AS_STAT, STATX_ALL, 0x7ffc3c621890) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-1&lt;&#x2F;span&gt;&lt;span&gt; ENOSYS (Function not implemented)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newfstatat&lt;&#x2F;span&gt;&lt;span&gt;(AT_FDCWD, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;etc&#x2F;fstab&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, {st_mode=S_IFREG|0644, st_size=820, ...}, 0) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inotify_add_watch&lt;&#x2F;span&gt;&lt;span&gt;(12, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;etc&#x2F;fstab&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, IN_MODIFY|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IN_ATTRIB&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IN_MOVED_FROM&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IN_MOVED_TO&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IN_DELETE_SELF&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IN_MOVE_SELF&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;access&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;run&#x2F;udev&#x2F;control&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, F_OK)       = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;socket&lt;&#x2F;span&gt;&lt;span&gt;(AF_NETLINK, SOCK_RAW|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SOCK_CLOEXEC&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SOCK_NONBLOCK,&lt;&#x2F;span&gt;&lt;span&gt; NETLINK_KOBJECT_UEVENT) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getpid&lt;&#x2F;span&gt;&lt;span&gt;()                                = 29328
&lt;&#x2F;span&gt;&lt;span&gt;gettid()                                = 29328
&lt;&#x2F;span&gt;&lt;span&gt;getrandom(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\x0d\xd4\x7d\xd7\xce\xab\xa3\xb8\x3b\x75\x8a\x49\xa8\xd8\xe9\xb7&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; 16, GRND_NONBLOCK) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getrandom&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\xcf\xfb\xfe\xd6\xf2\x00\x03\x4d\xbe\xa0\xbc\xb9\x4a\x4a\x52\xbb&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, 16, GRND_NONBLOCK) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getrandom&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\xec\x43\xc1\x92\xa2\x3e\xcb\xfd\x5b\x34\x10\x54\xb2\x67\xf7\x25&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, 16, GRND_NONBLOCK) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setsockopt&lt;&#x2F;span&gt;&lt;span&gt;(14, SOL_SOCKET, SO_ATTACH_FILTER, {len=29, filter=0x7ffc3c620aa0}, 16) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setsockopt&lt;&#x2F;span&gt;&lt;span&gt;(14, SOL_SOCKET, SO_PASSCRED, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, 4) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(14, {sa_family=AF_NETLINK, nl_pid=0, nl_groups=0x000002}, 12) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getsockname&lt;&#x2F;span&gt;&lt;span&gt;(14, {sa_family=AF_NETLINK, nl_pid=29328, nl_groups=0x000002}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(5, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\1\0\0\0\0\0\0\0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, 8)         = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(7, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\1\0\0\0\0\0\0\0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, 8)         = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futex&lt;&#x2F;span&gt;&lt;span&gt;(0x7ffc3c6219d0, FUTEX_WAIT_PRIVATE, 0, NULL) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(5, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\1\0\0\0\0\0\0\0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, 8)         = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(7, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\1\0\0\0\0\0\0\0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, 8)         = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futex&lt;&#x2F;span&gt;&lt;span&gt;(0x7fb56853f420, FUTEX_WAKE_PRIVATE, 1) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futex&lt;&#x2F;span&gt;&lt;span&gt;(0x7ffc3c6217d0, FUTEX_WAIT_PRIVATE, 0, NULL) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-1&lt;&#x2F;span&gt;&lt;span&gt; EAGAIN (Resource temporarily unavailable)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(7, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\1\0\0\0\0\0\0\0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, 8)         = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futex&lt;&#x2F;span&gt;&lt;span&gt;(0x55e72722f180, FUTEX_WAIT_PRIVATE, 0, NULL) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futex&lt;&#x2F;span&gt;&lt;span&gt;(0x55e72722f130, FUTEX_WAKE_PRIVATE, 1) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(7, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\1\0\0\0\0\0\0\0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, 8)         = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futex&lt;&#x2F;span&gt;&lt;span&gt;(0x7fb56853f420, FUTEX_WAKE_PRIVATE, 1) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futex&lt;&#x2F;span&gt;&lt;span&gt;(0x7ffc3c621620, FUTEX_WAIT_PRIVATE, 0, NULL) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(7, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\1\0\0\0\0\0\0\0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, 8)         = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futex&lt;&#x2F;span&gt;&lt;span&gt;(0x7fb56853f420, FUTEX_WAKE_PRIVATE, 1) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futex&lt;&#x2F;span&gt;&lt;span&gt;(0x7ffc3c621620, FUTEX_WAIT_PRIVATE, 0, NULL) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-1&lt;&#x2F;span&gt;&lt;span&gt; EAGAIN (Resource temporarily unavailable)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(7, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\1\0\0\0\0\0\0\0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, 8)         = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futex&lt;&#x2F;span&gt;&lt;span&gt;(0x55e72722ac90, FUTEX_WAIT_PRIVATE, 0, NULL^C) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; ERESTARTSYS (To be restarted if SA_RESTART is set)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;delay, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctrl+c&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This show us that we&#x27;re waiting for something.
Most of the output shows some communication happening between user-space and kernel-space, which could be &lt;em&gt;dbus&lt;&#x2F;em&gt; working.
&lt;em&gt;futex&lt;&#x2F;em&gt; is a syscall for user space lock used for shared-memory synchronization, &lt;em&gt;IPC&lt;&#x2F;em&gt;, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, so it is time to grab that backtrace. Lets launch within &lt;em&gt;GDB&lt;&#x2F;em&gt; and see what we can get from it. It may give some further hints at
what exactly it is waiting for:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜  ~&lt;&#x2F;span&gt;&lt;span&gt; gdb dolphin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GNU&lt;&#x2F;span&gt;&lt;span&gt; gdb (GDB) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8.3.1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;...output...&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Reading&lt;&#x2F;span&gt;&lt;span&gt; symbols from dolphin...
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;No&lt;&#x2F;span&gt;&lt;span&gt; debugging symbols found in dolphin)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;span&gt;) r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Starting&lt;&#x2F;span&gt;&lt;span&gt; program: &#x2F;usr&#x2F;bin&#x2F;dolphin 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[Thread&lt;&#x2F;span&gt;&lt;span&gt; debugging using libthread_db enabled]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Using&lt;&#x2F;span&gt;&lt;span&gt; host libthread_db library &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;lib&#x2F;libthread_db.so.1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[New&lt;&#x2F;span&gt;&lt;span&gt; Thread 0x7fffefb45700 (LWP 31973)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[New&lt;&#x2F;span&gt;&lt;span&gt; Thread 0x7fffeed96700 (LWP 31974)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;wait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt; bit and hit ctrl+c to get back at gdb&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;^C
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt; 1 &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dolphin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; received signal SIGINT, Interrupt.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x00007ffff438ac45&lt;&#x2F;span&gt;&lt;span&gt; in pthread_cond_wait@@GLIBC_2.3.2 () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;lib&#x2F;libpthread.so.0
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;span&gt;) bt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#0  0x00007ffff438ac45 in pthread_cond_wait@@GLIBC_2.3.2 () from &#x2F;usr&#x2F;lib&#x2F;libpthread.so.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#1  0x00007ffff5b3e610 in QWaitCondition::wait(QMutex*, QDeadlineTimer) () from &#x2F;usr&#x2F;lib&#x2F;libQt5Core.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#2  0x00007ffff5b3e702 in QWaitCondition::wait(QMutex*, unsigned long) () from &#x2F;usr&#x2F;lib&#x2F;libQt5Core.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#3  0x00007ffff5ffd5cd in ?? () from &#x2F;usr&#x2F;lib&#x2F;libQt5DBus.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#4  0x00007ffff5fadfa3 in ?? () from &#x2F;usr&#x2F;lib&#x2F;libQt5DBus.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#5  0x00007ffff5fae7ce in ?? () from &#x2F;usr&#x2F;lib&#x2F;libQt5DBus.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#6  0x00007ffff5fb9e1e in ?? () from &#x2F;usr&#x2F;lib&#x2F;libQt5DBus.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#7  0x00007ffff5fb9f86 in QDBusInterface::QDBusInterface(QString const&amp;amp;, QString const&amp;amp;, QString const&amp;amp;, QDBusConnection const&amp;amp;, QObject*) () from &#x2F;usr&#x2F;lib&#x2F;libQt5DBus.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#8  0x00007ffff753c8a7 in ?? () from &#x2F;usr&#x2F;lib&#x2F;libKF5Solid.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#9  0x00007ffff74bf918 in ?? () from &#x2F;usr&#x2F;lib&#x2F;libKF5Solid.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#10 0x00007ffff74c23ed in ?? () from &#x2F;usr&#x2F;lib&#x2F;libKF5Solid.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#11 0x00007ffff74c2536 in ?? () from &#x2F;usr&#x2F;lib&#x2F;libKF5Solid.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#12 0x00007ffff74c261b in Solid::DeviceNotifier::instance() () from &#x2F;usr&#x2F;lib&#x2F;libKF5Solid.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#13 0x00007ffff74c0d69 in Solid::Device::Device(QString const&amp;amp;) () from &#x2F;usr&#x2F;lib&#x2F;libKF5Solid.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#14 0x00007ffff7b06e0c in ?? () from &#x2F;usr&#x2F;lib&#x2F;libKF5KIOFileWidgets.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#15 0x00007ffff7b0e2ab in ?? () from &#x2F;usr&#x2F;lib&#x2F;libKF5KIOFileWidgets.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#16 0x00007ffff7b0e3ed in ?? () from &#x2F;usr&#x2F;lib&#x2F;libKF5KIOFileWidgets.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#17 0x00007ffff7b0fe73 in KFilePlacesModel::KFilePlacesModel(QString const&amp;amp;, QObject*) () from &#x2F;usr&#x2F;lib&#x2F;libKF5KIOFileWidgets.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#18 0x00007ffff7ee75dc in ?? () from &#x2F;usr&#x2F;lib&#x2F;libkdeinit5_dolphin.so
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#19 0x00007ffff7ee76fc in ?? () from &#x2F;usr&#x2F;lib&#x2F;libkdeinit5_dolphin.so
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#20 0x00007ffff7ee10f3 in ?? () from &#x2F;usr&#x2F;lib&#x2F;libkdeinit5_dolphin.so
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#21 0x00007ffff7ee89f3 in ?? () from &#x2F;usr&#x2F;lib&#x2F;libkdeinit5_dolphin.so
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#22 0x00007ffff7ee8c48 in ?? () from &#x2F;usr&#x2F;lib&#x2F;libkdeinit5_dolphin.so
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#23 0x00007ffff7eea934 in ?? () from &#x2F;usr&#x2F;lib&#x2F;libkdeinit5_dolphin.so
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#24 0x00007ffff7eeab7e in ?? () from &#x2F;usr&#x2F;lib&#x2F;libkdeinit5_dolphin.so
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#25 0x00007ffff7eeaf8f in ?? () from &#x2F;usr&#x2F;lib&#x2F;libkdeinit5_dolphin.so
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#26 0x00007ffff7ecba55 in kdemain () from &#x2F;usr&#x2F;lib&#x2F;libkdeinit5_dolphin.so
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#27 0x00007ffff7ceb153 in __libc_start_main () from &#x2F;usr&#x2F;lib&#x2F;libc.so.6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#28 0x000055555555505e in _start ()
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh well, not much useful right? No debug symbols available, but at least we can see a few more
interesting things there.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Looks like &lt;em&gt;Dolphin&lt;&#x2F;em&gt; is trying to create a &lt;code&gt;KFilePlacesModel&lt;&#x2F;code&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Dolphin&lt;&#x2F;em&gt; handed the work over to something called &lt;em&gt;Solid&lt;&#x2F;em&gt; in a &lt;em&gt;libKF5Solid&lt;&#x2F;em&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;which is creating a &lt;code&gt;DeviceNotifier&lt;&#x2F;code&gt; instance;&lt;&#x2F;li&gt;
&lt;li&gt;We&#x27;re in fact inside a wait condition inside &lt;code&gt;QDBusInterface&lt;&#x2F;code&gt; call;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Still not much useful, but looks like while &lt;em&gt;Dolphin&lt;&#x2F;em&gt; is booting up it will fill the UI &lt;em&gt;FilePlaces&lt;&#x2F;em&gt; with &lt;em&gt;Devices&lt;&#x2F;em&gt;.
This is the left side panel in &lt;em&gt;Dolphin&lt;&#x2F;em&gt;, where it will show your favorite places and storage devices.
It kind of makes sense, &lt;em&gt;Dolphin&lt;&#x2F;em&gt; needs to query which devices are available to show up, so maybe I
have a faulty device that is locking on a &lt;em&gt;dbus&lt;&#x2F;em&gt; query?&lt;&#x2F;p&gt;
&lt;p&gt;With these new information, I checked my storage and any network shares via &lt;em&gt;Konsole&lt;&#x2F;em&gt;, but everything
looked fine and working.&lt;&#x2F;p&gt;
&lt;p&gt;My next step would be to try to have more information on the stack trace and if I was lucky it could
tell me at least which kind of device I was having problem with.&lt;&#x2F;p&gt;
&lt;p&gt;I looked around my distro for KDE&#x27;s debug symbols and couldn&#x27;t find where or if they are available.
Luckily linux, &lt;em&gt;KDE&lt;&#x2F;em&gt;, &lt;em&gt;Qt&lt;&#x2F;em&gt;, etc. are open source, it would &lt;em&gt;only&lt;&#x2F;em&gt; need to get to build it myself. :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;intermission-c-and-c-build-systems-trauma&quot;&gt;Intermission: C and C++ build systems trauma&lt;&#x2F;h2&gt;
&lt;p&gt;At this moment I was cold sweating and thinking where this would take me and if it wouldn&#x27;t be better
to turn back and accept that one minute loading was my new reality until... the next update?&lt;&#x2F;p&gt;
&lt;p&gt;I was burnt out because just one week before I was trying to get a &lt;a href=&quot;https:&#x2F;&#x2F;www.gtk.org&#x2F;&quot;&gt;GTK&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;vcpkg&quot;&gt;vcpkg&lt;&#x2F;a&gt;
port up-to-date &lt;strong&gt;on linux&lt;&#x2F;strong&gt; and failed miserably. Previously &lt;em&gt;GTK&lt;&#x2F;em&gt; was using &lt;em&gt;Makefiles&lt;&#x2F;em&gt;, but they
migrated in recent versions to an even worse thing called &lt;em&gt;Meson&lt;&#x2F;em&gt;. Which basically made everything
way more complicated than the normal C build system story already is.&lt;&#x2F;p&gt;
&lt;p&gt;Logically, if building &lt;em&gt;GTK&lt;&#x2F;em&gt; was hard then building an entire desktop environment like &lt;em&gt;KDE&lt;&#x2F;em&gt; would
be a lot harder right?&lt;&#x2F;p&gt;
&lt;p&gt;Luckily the people at &lt;em&gt;KDE&lt;&#x2F;em&gt; (and &lt;em&gt;Qt&lt;&#x2F;em&gt;) decided to use &lt;em&gt;CMake&lt;&#x2F;em&gt; as their build system and did a nice
bootstrap setup. It is not perfect and other than a minor &lt;em&gt;perl&lt;&#x2F;em&gt; hiccup, everything worked like a charm!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&#x27;re curious, check the &lt;em&gt;KDE&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;community.kde.org&#x2F;Get_Involved&#x2F;development#One-time_setup:_your_development_environment&quot;&gt;build instructions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Seriously, &lt;em&gt;CMake&lt;&#x2F;em&gt; is not perfect but if you don&#x27;t use it you&#x27;re making things worse for &lt;strong&gt;everyone&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The build itself was long (I believe about ~1h as I didn&#x27;t time it) to get &lt;code&gt;dolphin&lt;&#x2F;code&gt; and &lt;code&gt;kio&lt;&#x2F;code&gt; ready.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;debug-symbols-the-solution&quot;&gt;Debug symbols, the solution?&lt;&#x2F;h2&gt;
&lt;p&gt;With a freshly build &lt;em&gt;Dolphin&lt;&#x2F;em&gt; with debug symbols ready, what can &lt;em&gt;GDB&lt;&#x2F;em&gt; reveal?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜  ~&lt;&#x2F;span&gt;&lt;span&gt; source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;kde&#x2F;build&#x2F;kio&#x2F;prefix.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜  ~&lt;&#x2F;span&gt;&lt;span&gt; gdb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;kde&#x2F;usr&#x2F;bin&#x2F;dolphin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GNU&lt;&#x2F;span&gt;&lt;span&gt; gdb (GDB) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;8.3.1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;...output...&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Reading&lt;&#x2F;span&gt;&lt;span&gt; symbols from &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;usr&#x2F;bin&#x2F;dolphin...
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;span&gt;) r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Starting&lt;&#x2F;span&gt;&lt;span&gt; program: &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;usr&#x2F;bin&#x2F;dolphin 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[Thread&lt;&#x2F;span&gt;&lt;span&gt; debugging using libthread_db enabled]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Using&lt;&#x2F;span&gt;&lt;span&gt; host libthread_db library &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;lib&#x2F;libthread_db.so.1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[New&lt;&#x2F;span&gt;&lt;span&gt; Thread 0x7fffef0c7700 (LWP 2812)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[New&lt;&#x2F;span&gt;&lt;span&gt; Thread 0x7fffee51e700 (LWP 2813)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;wait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt; bit and hit ctrl+c to get back at gdb&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;^C
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt; 1 &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dolphin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; received signal SIGINT, Interrupt.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x00007ffff4beac45&lt;&#x2F;span&gt;&lt;span&gt; in pthread_cond_wait@@GLIBC_2.3.2 () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;lib&#x2F;libpthread.so.0
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;span&gt;) bt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#0  0x00007ffff4beac45 in pthread_cond_wait@@GLIBC_2.3.2 () from &#x2F;usr&#x2F;lib&#x2F;libpthread.so.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#1  0x00007ffff562b610 in QWaitCondition::wait(QMutex*, QDeadlineTimer) () from &#x2F;usr&#x2F;lib&#x2F;libQt5Core.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#2  0x00007ffff562b702 in QWaitCondition::wait(QMutex*, unsigned long) () from &#x2F;usr&#x2F;lib&#x2F;libQt5Core.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#3  0x00007ffff68f25cd in ?? () from &#x2F;usr&#x2F;lib&#x2F;libQt5DBus.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#4  0x00007ffff68a2fa3 in ?? () from &#x2F;usr&#x2F;lib&#x2F;libQt5DBus.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#5  0x00007ffff68a37ce in ?? () from &#x2F;usr&#x2F;lib&#x2F;libQt5DBus.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#6  0x00007ffff68aee1e in ?? () from &#x2F;usr&#x2F;lib&#x2F;libQt5DBus.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#7  0x00007ffff68aef86 in QDBusInterface::QDBusInterface(QString const&amp;amp;, QString const&amp;amp;, QString const&amp;amp;, QDBusConnection const&amp;amp;, QObject*) () from &#x2F;usr&#x2F;lib&#x2F;libQt5DBus.so.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#8  0x00007ffff6c81468 in Solid::Backends::UPower::UPowerManager::UPowerManager (this=0x555555946340, parent=0x0) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;solid&#x2F;src&#x2F;solid&#x2F;devices&#x2F;backends&#x2F;upower&#x2F;upowermanager.cpp:41
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#9  0x00007ffff6c293f1 in Solid::ManagerBasePrivate::loadBackends (this=0x555555944060) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;solid&#x2F;src&#x2F;solid&#x2F;devices&#x2F;managerbase.cpp:90
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#10 0x00007ffff6c2d6d2 in Solid::DeviceManagerPrivate::DeviceManagerPrivate (this=0x555555944050) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;solid&#x2F;src&#x2F;solid&#x2F;devices&#x2F;frontend&#x2F;devicemanager.cpp:38
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#11 0x00007ffff6c2ecaf in Solid::DeviceManagerStorage::ensureManagerCreated (this=0x7ffff6cd354c &amp;lt;(anonymous namespace)::Q_QGS_globalDeviceStorage::innerFunction()::holder&amp;gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;at&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;solid&#x2F;src&#x2F;solid&#x2F;devices&#x2F;frontend&#x2F;devicemanager.cpp:301
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#12 0x00007ffff6c2ec62 in Solid::DeviceManagerStorage::notifier (this=0x7ffff6cd354c &amp;lt;(anonymous namespace)::Q_QGS_globalDeviceStorage::innerFunction()::holder&amp;gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;at&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;solid&#x2F;src&#x2F;solid&#x2F;devices&#x2F;frontend&#x2F;devicemanager.cpp:294
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#13 0x00007ffff6c2e5da in Solid::DeviceNotifier::instance () at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;solid&#x2F;src&#x2F;solid&#x2F;devices&#x2F;frontend&#x2F;devicemanager.cpp:182
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#14 0x00007ffff6c2ae85 in Solid::Device::Device (this=0x555555697cb0, udi=...) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;solid&#x2F;src&#x2F;solid&#x2F;devices&#x2F;frontend&#x2F;device.cpp:59
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#15 0x00007ffff7bece5e in KFilePlacesItem::KFilePlacesItem (this=0x555555697c80, manager=0x5555559dc5d0, address=..., udi=...) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;kio&#x2F;src&#x2F;filewidgets&#x2F;kfileplacesitem.cpp:48
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#16 0x00007ffff7bf670d in KFilePlacesModel::Private::loadBookmarkList (this=0x5555556cbb00) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;kio&#x2F;src&#x2F;filewidgets&#x2F;kfileplacesmodel.cpp:764
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#17 0x00007ffff7bf559d in KFilePlacesModel::Private::_k_reloadBookmarks (this=0x5555556cbb00) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;kio&#x2F;src&#x2F;filewidgets&#x2F;kfileplacesmodel.cpp:650
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#18 0x00007ffff7bf443c in KFilePlacesModel::KFilePlacesModel (this=0x5555559f2070, alternativeApplicationName=..., parent=0x0) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;kio&#x2F;src&#x2F;filewidgets&#x2F;kfileplacesmodel.cpp:403
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#19 0x00007ffff7ef7564 in DolphinPlacesModelSingleton::DolphinPlacesModelSingleton (this=0x7ffff7fcadb8 &amp;lt;DolphinPlacesModelSingleton::instance()::s_self&amp;gt;) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;dolphin&#x2F;src&#x2F;dolphinplacesmodelsingleton.cpp:26
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#20 0x00007ffff7ef75f5 in DolphinPlacesModelSingleton::instance () at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;dolphin&#x2F;src&#x2F;dolphinplacesmodelsingleton.cpp:33
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#21 0x00007ffff7eea8fe in DolphinViewContainer::DolphinViewContainer (this=0x5555559e4540, url=..., parent=0x5555559e8310) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;dolphin&#x2F;src&#x2F;dolphinviewcontainer.cpp:96
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#22 0x00007ffff7ef9a92 in DolphinTabPage::createViewContainer (this=0x55555594c6a0, url=...) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;dolphin&#x2F;src&#x2F;dolphintabpage.cpp:370
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#23 0x00007ffff7ef85e2 in DolphinTabPage::DolphinTabPage (this=0x55555594c6a0, primaryUrl=..., secondaryUrl=..., parent=0x55555566ff60) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;dolphin&#x2F;src&#x2F;dolphintabpage.cpp:43
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#24 0x00007ffff7efb432 in DolphinTabWidget::openNewTab (this=0x55555566ff60, primaryUrl=..., secondaryUrl=..., tabPlacement=DolphinTabWidget::AfterLastTab) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;dolphin&#x2F;src&#x2F;dolphintabwidget.cpp:171
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#25 0x00007ffff7efb3b0 in DolphinTabWidget::openNewActivatedTab (this=0x55555566ff60, primaryUrl=..., secondaryUrl=...) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;dolphin&#x2F;src&#x2F;dolphintabwidget.cpp:163
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#26 0x00007ffff7efb7cc in DolphinTabWidget::openDirectories (this=0x55555566ff60, dirs=..., splitView=false) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;dolphin&#x2F;src&#x2F;dolphintabwidget.cpp:215
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#27 0x00007ffff7ec7c90 in DolphinMainWindow::openDirectories (this=0x555555631210, dirs=..., splitView=false) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;dolphin&#x2F;src&#x2F;dolphinmainwindow.cpp:221
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#28 0x00007ffff7ec4821 in kdemain (argc=1, argv=0x7fffffffdcf8) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;src&#x2F;dolphin&#x2F;src&#x2F;main.cpp:171
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#29 0x000055555555517b in main (argc=1, argv=0x7fffffffdcf8) at &#x2F;home&#x2F;fungos&#x2F;kde&#x2F;build&#x2F;dolphin&#x2F;src&#x2F;dolphin_dummy.cpp:3
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we have a nice stack. This reveals a lot of stuff we missed in the first try, mostly are uninsteresting details.
The real nice thing there is that now we know &lt;em&gt;which&lt;&#x2F;em&gt; device is being queried via &lt;em&gt;dbus&lt;&#x2F;em&gt;, which is...&lt;em&gt;UPower&lt;&#x2F;em&gt;?
Wait, what is happening here? &lt;strong&gt;WHY&lt;&#x2F;strong&gt; &lt;em&gt;Dolphin&lt;&#x2F;em&gt; would try to query some &lt;em&gt;power&lt;&#x2F;em&gt; related device white querying
up storage stuff?&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a step back.
We never asked ourselves what is this &lt;em&gt;Solid&lt;&#x2F;em&gt; thing. Searching about it leads to &lt;a href=&quot;https:&#x2F;&#x2F;techbase.kde.org&#x2F;Development&#x2F;Tutorials&#x2F;Solid&#x2F;Introduction&quot;&gt;Solid page&lt;&#x2F;a&gt;
on &lt;em&gt;KDE TechBase&lt;&#x2F;em&gt; wiki. That page explains that &lt;em&gt;Solid&lt;&#x2F;em&gt; is a kind of &lt;em&gt;Hardware Discovery Layer&lt;&#x2F;em&gt; and
some features it provides is &lt;em&gt;Listing Devices&lt;&#x2F;em&gt;. In this page there is a tutorial on how your program
can use it, but mostly important, there is information about a &lt;code&gt;solid-hardware&lt;&#x2F;code&gt; tool to use on command line.&lt;&#x2F;p&gt;
&lt;p&gt;Lets try it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜  ~&lt;&#x2F;span&gt;&lt;span&gt; solid-hardware list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Object::connect:&lt;&#x2F;span&gt;&lt;span&gt; No such signal QDBusAbstractInterface::DeviceAdded(QString)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Object::connect:&lt;&#x2F;span&gt;&lt;span&gt; No such signal QDBusAbstractInterface::DeviceRemoved(QString)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;virtual&lt;&#x2F;span&gt;&lt;span&gt; QStringList Solid::Backends::UPower::UPowerManager::allDevices()  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error:  &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;org.freedesktop.DBus.Error.TimedOut&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;udi&lt;&#x2F;span&gt;&lt;span&gt; = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;org&#x2F;kde&#x2F;solid&#x2F;udev&#x2F;sys&#x2F;devices&#x2F;LNXSYSTM:00&#x2F;LNXPWRBN:00&#x2F;input&#x2F;input5&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lot&lt;&#x2F;span&gt;&lt;span&gt; of other devices&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;BINGO?
Surely it had the exact same delay as &lt;em&gt;Dolphin&lt;&#x2F;em&gt; before any output was shown and then as soon as it unblocked
I got the same output messages about unknown signals and a new interesting error about &lt;em&gt;UPower dbus&lt;&#x2F;em&gt;
timeout error.&lt;&#x2F;p&gt;
&lt;p&gt;Checking again the stack trace we see that &lt;em&gt;Solid&lt;&#x2F;em&gt; device manager frontend will request to &lt;code&gt;loadBackends()&lt;&#x2F;code&gt;
in &lt;code&gt;ManagerBasePrivate&lt;&#x2F;code&gt;, which in turn &lt;a href=&quot;https:&#x2F;&#x2F;cgit.kde.org&#x2F;solid.git&#x2F;tree&#x2F;src&#x2F;solid&#x2F;devices&#x2F;managerbase.cpp?id=e33da0b273312877770d14ee9b6906acfacba8d0#n65&quot;&gt;process all kind of backends&lt;&#x2F;a&gt;
indiscriminately as it is agnostic about its clients intentions.&lt;&#x2F;p&gt;
&lt;p&gt;Now we know that:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Dolphin&lt;&#x2F;em&gt; needs to query storage devices using &lt;em&gt;Solid&lt;&#x2F;em&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Solid&lt;&#x2F;em&gt; loads all kind of backends independenty of &lt;em&gt;Dolphin&lt;&#x2F;em&gt; real needs;&lt;&#x2F;li&gt;
&lt;li&gt;When a backend loads it will query &lt;em&gt;dbus&lt;&#x2F;em&gt; in some or another way;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;UPower&lt;&#x2F;em&gt; debus service is timing out;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Solid&lt;&#x2F;em&gt; blocks and in turn &lt;em&gt;Dolphin&lt;&#x2F;em&gt; waits until the timeout fire to continue working;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;So what is &lt;a href=&quot;https:&#x2F;&#x2F;upower.freedesktop.org&#x2F;&quot;&gt;UPower&lt;&#x2F;a&gt;? It seems to be an(other) abstraction layer to
deal with hardware power management and it seems to be in part responsable to manage suspending and
waking up things.&lt;&#x2F;p&gt;
&lt;p&gt;So why does it timeout? &lt;code&gt;man upower&lt;&#x2F;code&gt; gives a few options, lets try some commands and see what we get:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜  ~&lt;&#x2F;span&gt;&lt;span&gt; upower&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -e
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;upower:10725&lt;&#x2F;span&gt;&lt;span&gt;): UPower-WARNING **: 21:04:33.690: Cannot connect to upowerd: Error calling StartServiceByName for org.freedesktop.UPower: Timeout was reached
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜  ~&lt;&#x2F;span&gt;&lt;span&gt; upower&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --monitor
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;upower:6427&lt;&#x2F;span&gt;&lt;span&gt;): UPower-WARNING **: 22:22:36.230: Cannot connect to upowerd: Error calling StartServiceByName for org.freedesktop.UPower: Failed to activate service &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;org.freedesktop.UPower&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: timed out (service_start_timeout=25000ms)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sure. So &lt;em&gt;upowerd&lt;&#x2F;em&gt; daemon is unreachable for some reason. If we ask &lt;em&gt;systemd&lt;&#x2F;em&gt; to start it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜  ~&lt;&#x2F;span&gt;&lt;span&gt; sudo systemctl start upower
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Job&lt;&#x2F;span&gt;&lt;span&gt; for upower.service failed because the control process exited with error code.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;See &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;systemctl status upower.service&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; and &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;journalctl -xe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; for details.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;journalctl&lt;&#x2F;code&gt; doesn&#x27;t say much useful, only that we got an &lt;code&gt;exit code 217&lt;&#x2F;code&gt;.
And this link to &lt;a href=&quot;https:&#x2F;&#x2F;forum.manjaro.org&#x2F;c&#x2F;technical-issues-and-assistance&quot;&gt;Support&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But if we launch &lt;code&gt;upowerd&lt;&#x2F;code&gt; service ourselves, it works:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜  ~&lt;&#x2F;span&gt;&lt;span&gt; sudo &#x2F;usr&#x2F;lib&#x2F;upowerd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --verbose
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[sudo]&lt;&#x2F;span&gt;&lt;span&gt; password for fungos: 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TI:21:05:00&lt;&#x2F;span&gt;&lt;span&gt;     Acquired inhibitor lock (7)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TI:21:05:00&lt;&#x2F;span&gt;&lt;span&gt;     Starting upowerd version 0.99.11
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And magically &lt;em&gt;Dolphin&lt;&#x2F;em&gt; becomes alive again and we can confirm with &lt;code&gt;solid-hardware list&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Great, at least we have a workaround! And we know that the problem is actually &lt;em&gt;systemd&lt;&#x2F;em&gt;.
Now we have two questions to answer:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Why &lt;em&gt;systemd&lt;&#x2F;em&gt; is unable to start it?&lt;&#x2F;li&gt;
&lt;li&gt;How to correctly fix this?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Going to support link from &lt;em&gt;systemd&lt;&#x2F;em&gt; journal output and searching for &lt;em&gt;upower&lt;&#x2F;em&gt; brings us to
this &lt;a href=&quot;https:&#x2F;&#x2F;forum.manjaro.org&#x2F;t&#x2F;upower-daemon-failed-to-start&#x2F;108539&quot;&gt;question&lt;&#x2F;a&gt;. Which is basically
the issue I was having.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;A &lt;em&gt;systemd&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;systemd&#x2F;systemd&#x2F;blob&#x2F;v243&#x2F;README#L77&quot;&gt;change&lt;&#x2F;a&gt; that makes use of a kernel
feature unsupported on my kernel &lt;code&gt;4.9.202&lt;&#x2F;code&gt; broke my file manager.&lt;&#x2F;p&gt;
&lt;p&gt;Manjaro delivered a &lt;em&gt;systemd&lt;&#x2F;em&gt; upgrade without &lt;strong&gt;enforcing&lt;&#x2F;strong&gt; a minimal kernel version.
In Manjaro defense, they clearly stated this on their changelog, but we shouldn&#x27;t expect people to
read it.&lt;&#x2F;p&gt;
&lt;p&gt;This made me realize that I really need to update my kernel as it is 2 years old already.
And, that I have a lot less issues with linux than with Windows on my daily work, take that Microsoft.&lt;&#x2F;p&gt;
&lt;p&gt;Now an upgrade to &lt;code&gt;5.4&lt;&#x2F;code&gt; is required, see you soon...&lt;&#x2F;p&gt;
&lt;h3 id=&quot;epilogue-5-minutes-later&quot;&gt;Epilogue (...5 minutes later)&lt;&#x2F;h3&gt;
&lt;p&gt;... and it is done. After all this I&#x27;m up and running on &lt;code&gt;5.4&lt;&#x2F;code&gt; and most importantly, &lt;em&gt;Dolphin&lt;&#x2F;em&gt; is
alive.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>cr.h: A Simple C Hot Reload Header-only Library</title>
          <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://fungos.github.io/cr-simple-c-hot-reload/</link>
          <guid>https://fungos.github.io/cr-simple-c-hot-reload/</guid>
          <description xml:base="https://fungos.github.io/cr-simple-c-hot-reload/">&lt;p&gt;Recently I&#x27;ve been back to hobby coding simple C stuff, and one project that I&#x27;m doing with a friend tries to simple emulate some old game. The idea is really basic, but we want to do it in the C-style without over engineering or losing track of the hobby feeling.&lt;&#x2F;p&gt;
&lt;p&gt;But! It is really hard to not care at least a bit, even if it is just hobby stuff. I got literally side-tracked at one point and here I describe why and the resulting product of this.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;camo.githubusercontent.com&#x2F;08a269b19513df8325a177ff96e4e387f36b5bbf&#x2F;68747470733a2f2f692e696d6775722e636f6d2f4e7136733047502e676966&quot; alt=&quot;ImGui with cr.h&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The &quot;Problem&quot;&lt;&#x2F;h2&gt;
&lt;p&gt;While prototyping a functionality in this project, I wanted to be able to quickly iterate trying some ideas. My first reaction was that having a scripting language from the start would be a benefit for testing out ideas in a fast-paced way, but at the same time that would easily get in the way (by requiring bindings and maintenance) considering the time available for some hobby coding. On the other side, something that wouldn&#x27;t get in the way would be doing it in a way as close as possible of the C and with less boilerplate possible, helping us keep the focus on the project itself.&lt;&#x2F;p&gt;
&lt;p&gt;If what we wanted is something close to C, it could be done in at least two ways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a script based on a C subset (preferable compilable to C); or,&lt;&#x2F;li&gt;
&lt;li&gt;run-time hot-reload for live coding;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&#x2F;&gt;
Independent of which way we decided to go with, I had already some expectations about it, I wanted something that respected most of the following requirements, loosely based on my priorities for a hobby project:
&lt;ul&gt;
&lt;li&gt;easy to use;&lt;&#x2F;li&gt;
&lt;li&gt;requires the minimum amount of boilerplate;&lt;&#x2F;li&gt;
&lt;li&gt;easy to maintain;&lt;&#x2F;li&gt;
&lt;li&gt;fast;&lt;&#x2F;li&gt;
&lt;li&gt;independent of build system and not requiring custom build steps or anything;&lt;&#x2F;li&gt;
&lt;li&gt;closest possible to the C-family syntax (ie. Lua was a big NO);&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-options&quot;&gt;The &quot;Options&quot;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve checked some scripting languages and none of them fit most of the listed requirements. The better ones are slow or complex and the faster ones (as Lua) have annoying syntax. I mostly based my evaluation on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;r-lyeh&#x2F;scriptorium&quot;&gt;this&lt;&#x2F;a&gt; very nice listing with some benchmarks and code samples.&lt;&#x2F;p&gt;
&lt;p&gt;In the other hand, creating a kind of C script is not that simple, it requires much more code to achieve something usable than integrating some ready-to-use scripting language. There is a bunch of libraries and tools that can help, like embedding a simple compiler as &lt;a href=&quot;https:&#x2F;&#x2F;bellard.org&#x2F;tcc&#x2F;&quot;&gt;TCC&lt;&#x2F;a&gt; or one complex as &lt;a href=&quot;https:&#x2F;&#x2F;clang.llvm.org&#x2F;docs&#x2F;Tooling.html&quot;&gt;libclang&#x2F;libtooling&lt;&#x2F;a&gt;, or even maybe something that already embedded the compiler for us, as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;anael-seghezzi&#x2F;CToy&quot;&gt;C-Toy&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;root.cern.ch&#x2F;cint&quot;&gt;CINT&lt;&#x2F;a&gt;. But that adds a lot of dependency code, requires too much fiddling with build systems, still requires writing bindings and aren&#x27;t really &lt;em&gt;easy to use&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The other option would be doing hot-reloading of the runtime code as we change it. Even if this may appear complex, it is at least not as complex as to write a simple language. One downside is that opposed to scripts, this area does not have much public content in both articles and source code forms. Luckily enough, this idea fits with my concept of hobby stuff and is doable in my free time.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hot-reloading&quot;&gt;Hot Reloading&lt;&#x2F;h3&gt;
&lt;p&gt;One very known solution is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RuntimeCompiledCPlusPlus&#x2F;RuntimeCompiledCPlusPlus&quot;&gt;RuntimeCompiledCPlusPlus (RCC++)&lt;&#x2F;a&gt;, other than that, there is nothing else &lt;strong&gt;ready-to-use&lt;&#x2F;strong&gt; even if this is a somewhat common practice privately. So first, lets thanks &lt;a href=&quot;https:&#x2F;&#x2F;www.enkisoftware.com&#x2F;about#doug&quot;&gt;Doug Binks&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.enkisoftware.com&quot;&gt;enkisoftware&lt;&#x2F;a&gt; for publishing RCC++ with an open source license, this is a much required improvement over the situation.&lt;&#x2F;p&gt;
&lt;p&gt;RCC++ is a full featured solution, and this comes with its own amount of complexity. On my case, I didn&#x27;t need all features it offers, but I strongly recommend evaluating it when looking for a solution, as each one has its pros and cons. To know more about its design and usage, I recommend reading &lt;a href=&quot;http:&#x2F;&#x2F;runtimecompiledcplusplus.blogspot.ca&#x2F;2016&#x2F;04&#x2F;runtime-compiled-c-article-available.html&quot;&gt;this article&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Another good thing about RCC++ is that it has listing of some &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RuntimeCompiledCPlusPlus&#x2F;RuntimeCompiledCPlusPlus&#x2F;wiki&#x2F;Alternatives&quot;&gt;alternatives&lt;&#x2F;a&gt; solutions on code hot-reloading, including some nice posts by people that use it for actual development like &lt;a href=&quot;http:&#x2F;&#x2F;ourmachinery.com&#x2F;post&#x2F;dll-hot-reloading-in-theory-and-practice&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt; from &lt;a href=&quot;http:&#x2F;&#x2F;ourmachinery.com&#x2F;&quot;&gt;Our Machinery&lt;&#x2F;a&gt;. Sadly, none of the projects with source code seems ready to use, as they look more like experimentation projects and most of them if not all, don&#x27;t have multi platform support or are simple barely usable at all.&lt;&#x2F;p&gt;
&lt;p&gt;So, I decided to write one that I hope to be simple but also usable by anyone:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cr-h-the-c-reloader&quot;&gt;cr.h: the c reloader&lt;&#x2F;h2&gt;
&lt;p&gt;Considering the requirements for our hobby project listed before, in a public and open source project these requirements would become:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;simple to use, but not basic;&lt;&#x2F;li&gt;
&lt;li&gt;less intrusive possible;&lt;&#x2F;li&gt;
&lt;li&gt;reusable to anyone, not only specific to my needs;&lt;&#x2F;li&gt;
&lt;li&gt;avoid build system customization or dependency;&lt;&#x2F;li&gt;
&lt;li&gt;linux and windows at least (macosx is a bonus);&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&#x2F;&gt;
The first four points are related to user experience and the last one is a minimum expected from any meaningful public project.
&lt;p&gt;Being simple and reusable comes with not being too intrusive and having a simple public API. If anyone other than me decide to use it, it should not require learning a lot of details of how it works nor requiring deep changes in existing code. But also, not requiring complex changes to existing building system or scripts to do some magic in the background.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;overview-and-usage&quot;&gt;Overview and Usage&lt;&#x2F;h3&gt;
&lt;p&gt;Before implementing &lt;code&gt;cr.h&lt;&#x2F;code&gt;, I read everything I could find about how people deal with this and what the most frequent problems and issues. I will try to explain how my implementation differ from others and how I&#x27;ve solved some of the more common issues.&lt;&#x2F;p&gt;
&lt;p&gt;The core of the system is really basic and do not differ from most of the home grown solutions. The idea is to split the code into a thin host application executable and the core of the program into a dynamically loadable binary (shared object or dll) guest.&lt;&#x2F;p&gt;
&lt;p&gt;The less the host needs to know the better and easier it becomes. Ideally it should just be able to load the binary, monitor for new updates, unload the current one saving any required state then loading the new up-to-date binary and passing over the saved state, repeating the process until terminated by the user.&lt;&#x2F;p&gt;
&lt;p&gt;The usage is really simple, the very first thing is to initialize the system with &lt;code&gt;cr_plugin_init&lt;&#x2F;code&gt;, a &lt;code&gt;cr_plugin&lt;&#x2F;code&gt; context and the fullpath to the loadable object (ie. a .so or .dll). Once initialized, the main function &lt;code&gt;cr_plugin_update&lt;&#x2F;code&gt; must be frequently called, as it will call the real application and it will deal with all the reloading and monitoring stuff. Finally, when the application wants to exit, &lt;code&gt;cr_plugin_close&lt;&#x2F;code&gt; will do all the required cleanup. This is all the public API when using &lt;code&gt;cr.h&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;cr_plugin&lt;&#x2F;code&gt; context contains some internal private stuff, but also some information useful to the application itself. One is the &lt;code&gt;version&lt;&#x2F;code&gt; field, a value incremented each time a reload is successful or decremented in case of a rollback. Rollbacks may happen when a crash or an issue is detected, the system will try to safely unload the problematic binary and reload a previous working one. In case of rollback, a &lt;code&gt;failure&lt;&#x2F;code&gt; code will be set in the plugin context and the new loaded binary may use this information to give some useful feedback or dealing with it in an appropriate fashion for the application.&lt;&#x2F;p&gt;
&lt;p&gt;Once up and running, each time the loadable binary is rebuilt, &lt;code&gt;cr.h&lt;&#x2F;code&gt; will trigger a reload as it is monitoring for file changes based on the file time stamp. Each time an update, a load or an unload happens, &lt;code&gt;cr.h&lt;&#x2F;code&gt; will pass the info down to the application by using the &lt;code&gt;cr_op&lt;&#x2F;code&gt; operation flag: &lt;code&gt;CR_LOAD&lt;&#x2F;code&gt;, &lt;code&gt;CR_STEP&lt;&#x2F;code&gt; or &lt;code&gt;CR_UNLOAD&lt;&#x2F;code&gt;. For example, in case of unload the application may be able to intercept and deal with something before the binary is fully unloaded (like saving some internal state).&lt;&#x2F;p&gt;
&lt;p&gt;This is everything needed to live code reload using &lt;code&gt;cr.h&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;However, how does &lt;code&gt;cr.h&lt;&#x2F;code&gt; deal with the issues cited over the other articles about hot-reloading? How to manage state between reloads? What about the common PDB locking that people frequently have on windows? &lt;code&gt;cr.h&lt;&#x2F;code&gt; tries to solve these problems without any workaround or tricks with build systems.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;problem-pdb-lock&quot;&gt;Problem: PDB Lock&lt;&#x2F;h4&gt;
&lt;p&gt;One recurring theme when doing hot-reloading on windows with a MSVC toolchain is the PDB lock while debugging. One instance of this issue can be seen &lt;a href=&quot;http:&#x2F;&#x2F;ourmachinery.com&#x2F;post&#x2F;dll-hot-reloading-in-theory-and-practice&#x2F;&quot;&gt;here&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;ourmachinery.com&#x2F;post&#x2F;little-machines-working-together-part-2&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;. These posts lists some possible solutions and problems with each solution, and it goes way down to trying to force unlock the file handles on windows as seen &lt;a href=&quot;https:&#x2F;&#x2F;blog.molecular-matters.com&#x2F;2017&#x2F;05&#x2F;09&#x2F;deleting-pdb-files-locked-by-visual-studio&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cr.h&lt;&#x2F;code&gt; solves this in a pragmatic and simple way, first it starts by copying the &lt;code&gt;.dll&lt;&#x2F;code&gt; and the &lt;code&gt;.pdb&lt;&#x2F;code&gt; with a new versioned name and then we fix the real issue, that is not the file lock.&lt;&#x2F;p&gt;
&lt;p&gt;When debugging, the debugger needs a way to find for the debug symbols, and in the MSVC toolchain this comes in the form of a second file, the &lt;code&gt;.pdb&lt;&#x2F;code&gt; that may exist elsewhere in the filesystem. So when generating the executable it will write the path to the matching PDB file inside the binary to be debugged. It literally contains the full path to the &lt;code&gt;.pdb&lt;&#x2F;code&gt; hardcoded inside it and the debugger will load this file causing a lock. You can check this yourself by doing a &lt;code&gt;strings&lt;&#x2F;code&gt; on the &lt;code&gt;.dll&lt;&#x2F;code&gt; or opening it with a hex editor and searching for the substring &lt;code&gt;.pdb&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The only thing needed to do to avoid the lock to happen, is to literally change this string to point to our own copy of &lt;code&gt;.pdb&lt;&#x2F;code&gt; and thus guaranteeing that the debugger will lock our copy and not the original file while debugging.&lt;&#x2F;p&gt;
&lt;p&gt;This can be done the brute-force but brittle way (searching and replacing the string), or the right way by doing what the debugger does: correctly opening and parsing the binary structures and modifying it. There are a lot of documentation on the &lt;a href=&quot;https:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;ms809762.aspx&quot;&gt;Portable Executable format&lt;&#x2F;a&gt; and how to parse it, or more specifically on how to find the &lt;a href=&quot;http:&#x2F;&#x2F;www.debuginfo.com&#x2F;articles&#x2F;debuginfomatch.html&quot;&gt;debugging information&lt;&#x2F;a&gt; as reference for more details on the subject.&lt;&#x2F;p&gt;
&lt;p&gt;With this simple solution we can debug and rebuild at the same time even during reloads, the debugger will find the correct debug info and be up-to-date with the current debugged binary as we modify it.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;problem-crashes&quot;&gt;Problem: Crashes&lt;&#x2F;h4&gt;
&lt;p&gt;While live coding, the chances to introduce problems are high as we get into a faster development flow. So if we can avoid crashing due to erroneous code, it will help keeping with this faster flow. Hence, &lt;code&gt;cr.h&lt;&#x2F;code&gt; tries to be helpful and to detect crashes and safely continuing the execution from a previous working version. This system is not unbreakable as at the end we are dealing with C&#x2F;C++ and there are just too many ways to shoot yourself.&lt;&#x2F;p&gt;
&lt;p&gt;In practice, &lt;code&gt;cr.h&lt;&#x2F;code&gt; tries to emulate the debugger here too. On windows it will use &lt;a href=&quot;https:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;windows&#x2F;desktop&#x2F;ms680657(v=vs.85).aspx&quot;&gt;structured exception handling&lt;&#x2F;a&gt; to detect some common problems as illegal instruction, access violation and some others. In which case, &lt;code&gt;cr.h&lt;&#x2F;code&gt; will catch it and try to unload the problematic binary and revert back to the previous working one, effectively doing a rollback.
Over Linux, the same happens but it is managed using the OS signal handlers.&lt;&#x2F;p&gt;
&lt;p&gt;All this enables a seamsly development flow that is pleasing to use.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;problem-state-transfer&quot;&gt;Problem: State Transfer&lt;&#x2F;h4&gt;
&lt;p&gt;A very common way to keep state between reload is to use the heap and pass pointers to objects so the host can hand it over the next reload. This requires that the plugin instances share the same allocator, it may be managed by the host or via a common crt (dynamic crt on MSVC). One limitation of this approach is with global and local static states.&lt;&#x2F;p&gt;
&lt;p&gt;For the first case, using the heap model the user may decide to manage its own states by filling a struct with pointers to objects and handing it over so &lt;code&gt;cr.h&lt;&#x2F;code&gt; can hold it between reloads using the &lt;code&gt;userdata&lt;&#x2F;code&gt; pointer in the &lt;code&gt;cr_plugin&lt;&#x2F;code&gt; context. Other than the same allocator being required, care should be taken with destructors called during unload.&lt;&#x2F;p&gt;
&lt;p&gt;The second case is when dealing with static state (both global and local), it would be really annoying and highly error prone to do it by hand like copying over to the heap and restoring (and dealing with a lot of issues this may cause). In this situation, &lt;code&gt;cr.h&lt;&#x2F;code&gt; will magically do all the hard work with all necessary static data tagged with a macro &lt;code&gt;CR_STATE&lt;&#x2F;code&gt;. These states will get saved and copied over to the newly loaded instance and everything will just work.. most of the time. The catch here is that depending on how much your binary changes, things may not work as we&#x27;re dealing with opaque memory copying and addresses that may change.&lt;&#x2F;p&gt;
&lt;p&gt;Here some things to be aware when using &lt;code&gt;CR_STATE&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Do not save objects that have pointers to anything that is not in the heap;&lt;&#x2F;li&gt;
&lt;li&gt;Do not save objects that have non trivial constructors and destructors, they may or may not work;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&#x2F;&gt;
All this is subject to change as I&#x27;ll be hardening it while using in my projects. I have some more ideas in the back of my mind on how to improve all this by using more debug info, but not sure if it is worth the effort. Enough yak shaving.
&lt;h3 id=&quot;development-stats&quot;&gt;Development Stats&lt;&#x2F;h3&gt;
&lt;p&gt;Finally, some approximated development time statistics (as my free time is mostly in spans of 30 minutes to 1h).&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Base implementation: 1h
&lt;ul&gt;
&lt;li&gt;Windows specific: 3h&lt;&#x2F;li&gt;
&lt;li&gt;Linux specific: 4h&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Samples: 3h&lt;&#x2F;li&gt;
&lt;li&gt;Tests: 2h&lt;&#x2F;li&gt;
&lt;li&gt;Documentation: 2h&lt;&#x2F;li&gt;
&lt;li&gt;This Post: 7h&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&#x2F;&gt;
Total: 22h (5 weeks, ~4h&#x2F;week)
&lt;h3 id=&quot;feedback&quot;&gt;Feedback&lt;&#x2F;h3&gt;
&lt;p&gt;Please, post corrections and suggestions about this post by opening an issue &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fungos&#x2F;fungos.github.io&#x2F;issues&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;. Any help&#x2F;improvement is appreciated.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Setting Up a Rust Environment on Windows</title>
          <pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://fungos.github.io/rust-windows-vscode/</link>
          <guid>https://fungos.github.io/rust-windows-vscode/</guid>
          <description xml:base="https://fungos.github.io/rust-windows-vscode/">&lt;p&gt;When I talk about Rust, one question that comes the most is about tooling and debugging. Online this can be seen a lot, mainly about debugging on Windows.&lt;&#x2F;p&gt;
&lt;p&gt;So I&#x27;ve decided to write a little guide mostly to practice my written English and bootstrap this blog, but also to document the current steps needed to set a good Windows Rust environment.&lt;&#x2F;p&gt;
&lt;p&gt;Be warned that it may miss some details or be too superficial for some people.&lt;&#x2F;p&gt;
&lt;p&gt;The setup described here is the one I&#x27;ve been using Rust on Windows (and approximately equivalent on GNU&#x2F;Linux) for some time and I believe it to be the ideal setup for myself, at least for the moment.&lt;&#x2F;p&gt;
&lt;p&gt;I also believe that this setup is already better than current C or C++ (take it with a grain of salt anyway), first because of Cargo, but also due the recent improvements with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang-nursery&#x2F;rls&quot;&gt;Rust Language Server (RLS)&lt;&#x2F;a&gt; and in part due to Rust use of LLVM and the compatibility with C ABI, it can piggyback on C&#x2F;C++ tools like GDB, Valgrind, profilers and lots more.&lt;&#x2F;p&gt;
&lt;p&gt;This makes setting up projects, developing and debugging a breeze if compared to C&#x2F;C++, even if compared with Visual Studio and Visual Assist. Only Debugging is not as clean as debugging C code, its more like an equivalent of debugging a heavy STL C++ code base and some people may find this hard.&lt;&#x2F;p&gt;
&lt;p&gt;I hope this may be helpfull in some way to these getting started with Rust on Windows.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: My background is with C and C++, so I tend to compare things with these languages and probably use terminology from this background.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;c-build-tools&quot;&gt;C++ Build Tools&lt;&#x2F;h2&gt;
&lt;p&gt;The first and most important thing to a working Rust environment is to have one C++ toolchain available so Rust can build C or C++ (&quot;-sys&quot;) crates and link against Windows libraries.&lt;&#x2F;p&gt;
&lt;p&gt;This can be achieved in two ways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Having a Visual Studio C++ installation, or;&lt;&#x2F;li&gt;
&lt;li&gt;Installing the smaller &lt;a href=&quot;http:&#x2F;&#x2F;landinghub.visualstudio.com&#x2F;visual-cpp-build-tools&quot;&gt;Visual C++ Build Tools&lt;&#x2F;a&gt; for a standalone toolchain;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;rustup&quot;&gt;Rustup&lt;&#x2F;h2&gt;
&lt;p&gt;Rustup is the responsible for managing Rust compilers, Cargo, documentation, and so on. This tool is the entry point for a complete Rust environment and as Cargo, is a central part of Rust tooling.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: To avoid any confusion with older Rust installations, if you&#x27;d already tried Rust before without Rustup, I suggest to uninstall everything (Rust, Cargo and anything related).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Installing Rustup is straightforward, download it &lt;a href=&quot;https:&#x2F;&#x2F;www.rustup.rs&#x2F;&quot;&gt;here&lt;&#x2F;a&gt; and then run it. A console window will launch as shown here:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;1&#x2F;rustup-console.png&quot; alt=&quot;rustup-init.exe&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Then go with the default installation (option 1). As shown in the screenshot, it will install a stable Rust for MSVC ABI.&lt;&#x2F;p&gt;
&lt;p&gt;Or by command line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cmd&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmd &quot;&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;&lt;span&gt;&amp;gt; rustup-init.exe -y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;rust-toolchain&quot;&gt;Rust Toolchain&lt;&#x2F;h3&gt;
&lt;p&gt;With Rustup installed, most of the toolchain management is done in the command line with the Rustup command. Getting used to it will surely help in the future.&lt;&#x2F;p&gt;
&lt;p&gt;First, lets update everything to be sure (required if it is not a fresh install):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cmd&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmd &quot;&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;&lt;span&gt;&amp;gt; rustup update
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, adding the nightly version of the compiler for trying experimental features and to be able to compile an useful tool (Clippy):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cmd&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmd &quot;&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;&lt;span&gt;&amp;gt; rustup install nightly
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;rls-and-components&quot;&gt;RLS and Components&lt;&#x2F;h3&gt;
&lt;p&gt;RLS is essential and the main component, but it comes with its own requirements: the Rust source code, documentation and the analysis component.
The source and documentation will be used by analysis component to feed RLS with required data about existing crates and code. Read more about what RLS can do &lt;a href=&quot;http:&#x2F;&#x2F;www.ncameron.org&#x2F;blog&#x2F;what-the-rls-can-do&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Basically, RLS enable auto-completion, documentation tooltips and related code editing features to any IDE supporting the Microsoft Language Server protocol. It is in a way equivalent to C++ Intellisense or Visual Assist. Although it is still under heavy development, I think it is already more usable than both of C++ alternatives on Visual Studio.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cmd&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmd &quot;&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;&lt;span&gt;&amp;gt; rustup default nightly
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; rustup component add rust-src
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; rustup component add rust-docs
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; rustup component add rust-analysis
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; rustup component add rls-preview
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; rustup update
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Both &lt;code&gt;rust-analysis&lt;&#x2F;code&gt; and &lt;code&gt;rls&lt;&#x2F;code&gt; can only be installed by using the nightly toolchain. Nightly can be set as the default toolchain or by passing the flag &lt;code&gt;--toolchain nightly&lt;&#x2F;code&gt; to the Rustup command line.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;rustfmt&quot;&gt;Rustfmt&lt;&#x2F;h3&gt;
&lt;p&gt;Rustfmt will automatically format the code accordingly to the current code style standard. Opposed to languages as C or C++ where each code base has its own style, Rust (and for the matter, most recent languages) enforce a standard style on the code. You may think it is too intrusive, but it is better for everyone by the end. More information about styling can be found on rustfmt &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang-nursery&#x2F;fmt-rfcs&#x2F;blob&#x2F;master&#x2F;guide&#x2F;guide.md&quot;&gt;RFC repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To install it, suffice to use Cargo:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cmd&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmd &quot;&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;&lt;span&gt;&amp;gt; cargo install rustfmt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It will be used by VSCode Rust Extension to automatically format Rust code being edited.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Rustfmt will be asked to be installed by Visual Studio Code if it isn&#x27;t already installed anyway.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;But rustfmt is in active development and the recommended way is by using the nightly version:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cmd&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmd &quot;&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;&lt;span&gt;&amp;gt; rustup run nightly cargo install rustfmt-nightly
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, formating code should be done by issuing the command bellow, indicating it uses the nightly toolchain otherwise and error loading its dependencies will happen:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cmd&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmd &quot;&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;&lt;span&gt;&amp;gt; cargo +nightly fmt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;clippy&quot;&gt;Clippy&lt;&#x2F;h3&gt;
&lt;p&gt;Clippy is another jewel of Rust, it is the second best friend (after Rust compiler) on helping learning Rust and improving the code. It is a linter that will catch issues and suggest improvements, it should be used regularly and will help learning some tricks and writing idiomatic code. The downside if we can say so is that it requires a nightly compiler to install&#x2F;compile it.&lt;&#x2F;p&gt;
&lt;p&gt;Again, to install, use Cargo (and be sure to have the nightly toolchain in use):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cmd&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmd &quot;&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;&lt;span&gt;&amp;gt; rustup run nightly cargo install clippy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Installing these tools with cargo means compiling them, and Rust compile times are not really the best. So, go take a coffee.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Clippy will be asked to be installed by Visual Studio Code if it isn&#x27;t already installed anyway.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To check a Rust project using Clippy:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cmd&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmd &quot;&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;&lt;span&gt;&amp;gt; cargo clippy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;visual-studio-code&quot;&gt;Visual Studio Code&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve tried some different IDEs (take a look &lt;a href=&quot;https:&#x2F;&#x2F;areweideyet.com&#x2F;&quot;&gt;here&lt;&#x2F;a&gt; for some alternatives and their current support state), but I believe VSCode (at the moment) is the best and most complete mostly due to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;language-server-protocol&quot;&gt;Language Server Protocol&lt;&#x2F;a&gt;&#x2F;RLS.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The second best is &lt;a href=&quot;https:&#x2F;&#x2F;intellij-rust.github.io&#x2F;&quot;&gt;IntelliJ Rust&lt;&#x2F;a&gt; and now it is &lt;a href=&quot;https:&#x2F;&#x2F;blog.jetbrains.com&#x2F;blog&#x2F;2017&#x2F;08&#x2F;04&#x2F;official-support-for-open-source-rust-plugin-for-intellij-idea-clion-and-other-jetbrains-ides&#x2F;&quot;&gt;officially supported by JetBrains&lt;&#x2F;a&gt;. The problem is that it is heavy. I wouldn&#x27;t recommend it unless you&#x27;re already have it. Also, it does not support debugging, but this is being worked on.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Before configuring a Rust project in Visual Studio Code, some extensions are needed as these will help to edit code and debugging, and they&#x27;re pretty much all it is needed to have a working Rust IDE.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;extensions&quot;&gt;Extensions&lt;&#x2F;h3&gt;
&lt;p&gt;All VSCode extensions here may be installed via the Extensions Panel, or by using &lt;code&gt;CTRL+P&lt;&#x2F;code&gt; and typing &lt;code&gt;ext install &amp;lt;name&amp;gt;&lt;&#x2F;code&gt; or by command line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cmd&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmd &quot;&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;&lt;span&gt;&amp;gt; code --install-extension &amp;lt;name&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;rust-rls&quot;&gt;Rust (rls)&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=rust-lang.rust&quot;&gt;Rust (rls)&lt;&#x2F;a&gt; is a new extension (the third Rust extension already) but is already very usable, also this is the official one by the Rust Tool Team and is being worked on actively.&lt;&#x2F;p&gt;
&lt;p&gt;Extension name: &lt;code&gt;rust-lang.rust&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cmd&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmd &quot;&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;&lt;span&gt;&amp;gt; code --install-extension rust-lang.rust
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;c-c&quot;&gt;C&#x2F;C++&lt;&#x2F;h4&gt;
&lt;p&gt;This extension is needed to be able to debug native binaries using GDB, LLDB or Visual Studio Debugger.&lt;&#x2F;p&gt;
&lt;p&gt;Extension name: &lt;code&gt;ms-vscode.cpptools&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cmd&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmd &quot;&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;&lt;span&gt;&amp;gt; code --install-extension ms-vscode.cpptools
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It will also download and install any required dependency.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;native-debug&quot;&gt;Native Debug&lt;&#x2F;h4&gt;
&lt;p&gt;This one is not really needed, but I recommend use this to automatically enable VSCode to set breakpoints on Rust code. Otherwise, it would require tuning user settings (&lt;code&gt;CTRL+,&lt;&#x2F;code&gt;) and setting &lt;code&gt;debug.allowBreakpointsEverywhere&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Extension name: &lt;code&gt;webfreak.debug&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cmd&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cmd &quot;&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;&lt;span&gt;&amp;gt; code --install-extension webfreak.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;debug
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;visualizers&quot;&gt;Visualizers&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: This section will soon be deprecated. A &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;43221&quot;&gt;recent commit&lt;&#x2F;a&gt; on Rust, is now embedding visualization information inside PDBs. This is already valid for Nightly toolchain, but Stable still requires this manual step.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;With Rust MSVC toolchain comes some type visualizers for Visual Studio Debugger (Natvis), these can be used to ease the visualization of some very few Rust types within the Debugger. Sadly, there are still limitations of what can be specified in a Natvis file.&lt;&#x2F;p&gt;
&lt;p&gt;The downside is that the installation of the visualization files are a bit manual at the moment, so this is the hardest part of all the Rust environment setup.&lt;&#x2F;p&gt;
&lt;p&gt;The files in question are in &lt;code&gt;%HOMEPATH%\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib\rustlib\etc&lt;&#x2F;code&gt; and must be copied to &lt;code&gt;%HOMEPATH%\.vscode\extensions\ms-vscode.cpptools-0.12.2\debugAdapters\vsdbg\bin\Visualizers&lt;&#x2F;code&gt; (note the version on ms-vscode.cpptools path, this can be different for your case).&lt;&#x2F;p&gt;
&lt;p&gt;If a custom visualizer is needed, an entry &lt;code&gt;&quot;visualizerFile&quot;&lt;&#x2F;code&gt; can be set inside &lt;code&gt;launch.json&lt;&#x2F;code&gt; (environment variables can be referenced as &lt;code&gt;${env:VAR}&lt;&#x2F;code&gt;), so for example, one can set: &lt;code&gt;&quot;visualizerFile&quot;: &quot;${env:HOMEPATH}&#x2F;.rustup&#x2F;toolchains&#x2F;stable-x86_64-pc-windows-msvc&#x2F;lib&#x2F;rustlib&#x2F;etc&#x2F;libcore.natvis&quot;&lt;&#x2F;code&gt;. For the moment, only one file can be used, an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;vscode-cpptools&#x2F;issues&#x2F;925&quot;&gt;issue&lt;&#x2F;a&gt; is open to make it work with multiple files.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;&#x2F;h2&gt;
&lt;p&gt;Now that everything is in place, the last thing is configuring a Rust project to be debugged.&lt;&#x2F;p&gt;
&lt;p&gt;Create a debug configuration by going to the &lt;code&gt;(1) Debug Panel&lt;&#x2F;code&gt;, then clicking on the &lt;code&gt;(2) Debug Configuration Dropdown&lt;&#x2F;code&gt; and then select &lt;code&gt;(3) C++ (Windows)&lt;&#x2F;code&gt; option as shown below:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;1&#x2F;vscode-debug-cfg.png#center&quot; alt=&quot;debug&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;1&#x2F;vscode-debug-msvc.png#center&quot; alt=&quot;debug&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This will open a new file in the editor, called &lt;code&gt;launch.json&lt;&#x2F;code&gt; where all launch settings are managed.&lt;&#x2F;p&gt;
&lt;p&gt;The initial contents of the file aren&#x27;t good because VSCode does not know details about the loaded Rust project (and I don&#x27;t believe extensions can do anything here to help with it, at least for the current version), so a little tweak is required.&lt;&#x2F;p&gt;
&lt;p&gt;The current file should look as this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.2.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;configurations&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(Windows) Launch&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cppvsdbg&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;launch&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;program&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enter program name, for example ${workspaceRoot}&#x2F;a.exe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [],
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stopAtEntry&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cwd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${workspaceRoot}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [],
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;externalConsole&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some important things to note here are the &lt;code&gt;type&lt;&#x2F;code&gt; and &lt;code&gt;program&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;type&lt;&#x2F;code&gt; should specify &lt;code&gt;cppvsdbg&lt;&#x2F;code&gt; to use the MSVC Debugger and have Natvis support.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;program&lt;&#x2F;code&gt; here is the path to the executable generated by rustc&#x2F;Cargo. When using Cargo, normally the debug executable will be found in a path as &lt;code&gt;&amp;lt;project&amp;gt;&#x2F;target&#x2F;debug&#x2F;&amp;lt;project&amp;gt;.exe&lt;&#x2F;code&gt;. With this in mind, a good default should be to point the &lt;code&gt;program&lt;&#x2F;code&gt; to &lt;code&gt;${workspaceRoot}&#x2F;target&#x2F;debug&#x2F;${workspaceRootFolderName}.exe&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;My preferred &lt;code&gt;launch.json&lt;&#x2F;code&gt; is this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.2.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;configurations&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cppvsdbg&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;launch&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;program&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${workspaceRoot}&#x2F;target&#x2F;debug&#x2F;${workspaceRootFolderName}.exe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [],
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stopAtEntry&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cwd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${workspaceRoot}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [],
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;externalConsole&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Release&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cppvsdbg&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;launch&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;program&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${workspaceRoot}&#x2F;target&#x2F;release&#x2F;${workspaceRootFolderName}.exe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [],
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stopAtEntry&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cwd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${workspaceRoot}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [],
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;externalConsole&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this, a way to debug release binaries is already in hand if needed for some reason.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wishlist&quot;&gt;Wishlist&lt;&#x2F;h2&gt;
&lt;p&gt;The missing key step here would be to have a better integration from Rust Language Extension to manipulate&#x2F;fix&#x2F;generate &lt;code&gt;launch.json&lt;&#x2F;code&gt; for Rust projects or even better, a &lt;code&gt;cargo ide-setup &amp;lt;ide&amp;gt;&lt;&#x2F;code&gt; command or something similar, where &lt;code&gt;&amp;lt;ide&amp;gt;&lt;&#x2F;code&gt; could be &lt;code&gt;vscode&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This command would then be able to install the required vscode extensions if needed, and copy the natvis files to the right place, if in a windows environment.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rust-env-setup-script&quot;&gt;&lt;code&gt;rust-env-setup&lt;&#x2F;code&gt; Script&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;fungos&#x2F;5c94a2b7ed4a5b7ea4572e54c0c96a34&quot;&gt;This&lt;&#x2F;a&gt; is a quick power shell script I hacked together in a gist for automatizing a working Rust environment with VSCode.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: I&#x27;m not a PS guy, so do not take this for a solution.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;&#x2F;h2&gt;
&lt;p&gt;Help me improving this text by submitting fixes for wrong wording&#x2F;phrasing or typos in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fungos&#x2F;fungos.github.io&#x2F;issues&quot;&gt;this repo issue tracker&lt;&#x2F;a&gt; or by commenting on twitter or elsewhere!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;updates&quot;&gt;Updates&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Fixed script to consider the fresh VSCode 64bits. Thanks @colemickens (Reddit).&lt;&#x2F;li&gt;
&lt;li&gt;Fixed missing analysis component and rustfmt-nightly on text and script. Thanks @dodheim (Reddit).&lt;&#x2F;li&gt;
&lt;li&gt;Added more information about how to add a natvis file into &lt;code&gt;launch.json&lt;&#x2F;code&gt; and mention that soon it will not be required, as it will be automatically embedded onto PDB files.&lt;&#x2F;li&gt;
&lt;li&gt;Add information and fix typo. Closes &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fungos&#x2F;fungos.github.io&#x2F;issues&#x2F;1&quot;&gt;issue #1&lt;&#x2F;a&gt; by @TheCycoONE (Github).&lt;&#x2F;li&gt;
&lt;li&gt;Update rustup rls component name to rls-preivew. Closes &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fungos&#x2F;fungos.github.io&#x2F;issues&#x2F;2&quot;&gt;issue #2&lt;&#x2F;a&gt; by @cbordeman  (Github).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>About Me</title>
          <pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://fungos.github.io/about/</link>
          <guid>https://fungos.github.io/about/</guid>
          <description xml:base="https://fungos.github.io/about/">&lt;p&gt;Hi, my name is Danny Angelo Carminati Grein and I live in Québec City.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m currently a Senior Technology Programmer at &lt;a href=&quot;http:&#x2F;&#x2F;beenox.com&#x2F;&quot;&gt;Beenox Inc.&lt;&#x2F;a&gt;&#x2F;Activision developing AAA games, you can find a bit more about my professional background over my &lt;a href=&quot;https:&#x2F;&#x2F;www.linkedin.com&#x2F;in&#x2F;dannygrein&quot;&gt;LinkedIn profile&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m no writter, but I&#x27;m trying to get out of my confort zone, consider it before anything else.&lt;&#x2F;p&gt;
&lt;p&gt;This is a personal blog and as such the opinions expressed here represent my own and not those of my employer. My opinions may generally be biased or simple wrong.&lt;&#x2F;p&gt;
&lt;p&gt;This blog is built with &lt;a href=&quot;https:&#x2F;&#x2F;getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt; and is based on the theme &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;insipx&#x2F;Ergo&quot;&gt;Ergo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
      </item>
    </channel>
</rss>
